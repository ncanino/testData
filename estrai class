import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

public class VerifyJavaVersion {

    public static void main(String[] args) throws IOException {
        // Directory contenente i file .jar
        String directoryPath = "path/to/directory";
        
        // Ottiene un array di file .jar nella directory
        File directory = new File(directoryPath);
        File[] jarFiles = directory.listFiles((dir, name) -> name.endsWith(".jar"));
        
        // Verifica la versione principale del bytecode di ogni file .class all'interno di ogni .jar
        for (File jarFile : jarFiles) {
            try (JarFile jar = new JarFile(jarFile)) {
                Enumeration<JarEntry> entries = jar.entries();
                while (entries.hasMoreElements()) {
                    JarEntry entry = entries.nextElement();
                    if (entry.getName().endsWith(".class")) {
                        InputStream is = jar.getInputStream(entry);
                        byte[] bytes = is.readAllBytes();
                        int majorVersion = ((bytes[6] & 0xFF) << 8) | (bytes[7] & 0xFF);
                        System.out.println("Il file " + entry.getName() + " all'interno di " + jarFile.getName() + " ha la versione principale del bytecode " + majorVersion);
                        break;
                    }
                }
            }
        }
    }
}
